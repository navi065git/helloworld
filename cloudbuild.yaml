steps:
# Create Artifact Registry repository (if not exists)
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    gcloud artifacts repositories create ${_REPO_NAME} \
      --project=${PROJECT_ID} \
      --repository-format=docker \
      --location=${_REGION} \
      --description="Docker repository for Node.js app" \
      || true

# Build the Docker image
- name: 'gcr.io/cloud-builders/docker'
  args: ['build', '-t', '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME}:${SHORT_SHA}', '.']

# Push the image to Artifact Registry
- name: 'gcr.io/cloud-builders/docker'
  args: ['push', '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME}:${SHORT_SHA}']

# Apply Kubernetes manifests
- name: 'gcr.io/cloud-builders/kubectl'
  args:
  - 'apply'
  - '-f'
  - 'k8s/'
  env:
  - 'CLOUDSDK_COMPUTE_ZONE=${_ZONE}'
  - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}'
  - 'CLOUDSDK_CONTAINER_USE_CLIENT_CERTIFICATE=False'

# Update the deployment to use the new image
- name: 'gcr.io/cloud-builders/kubectl'
  args:
  - 'set'
  - 'image'
  - 'deployment/${_DEPLOYMENT_NAME}'
  - '${_CONTAINER_NAME}=${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME}:${SHORT_SHA}'
  env:
  - 'CLOUDSDK_COMPUTE_ZONE=${_ZONE}'
  - 'CLOUDSDK_CONTAINER_CLUSTER=${_CLUSTER_NAME}'
  - 'CLOUDSDK_CONTAINER_USE_CLIENT_CERTIFICATE=False'

images:
- '${_REGION}-docker.pkg.dev/${PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME}:${SHORT_SHA}'

substitutions:
  _REPO_NAME: nodejs-app-repo
  _REGION: us-central1
  _IMAGE_NAME: nodejs-app
  _ZONE: us-central1-a
  _CLUSTER_NAME: my-gke-cluster
  _DEPLOYMENT_NAME: nodejs-app-deployment
  _CONTAINER_NAME: nodejs-app
